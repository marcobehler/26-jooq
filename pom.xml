<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.marcobehler</groupId>
	<artifactId>spring-boot-exercise</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-boot-exercise</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>

				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.11.10</version>
				<configuration>
					<jdbc>
						<driver>org.h2.Driver</driver>
						<url>jdbc:h2:~/springbootexercise1</url>
						<user>sa</user>
						<password></password>
					</jdbc>

					<generator>
						<!-- The default code generator. You can override this one, to generate your own code style.
                             Supported generators:
                             - org.jooq.codegen.JavaGenerator
                             - org.jooq.codegen.ScalaGenerator
                             Defaults to org.jooq.codegen.JavaGenerator -->
						<name>org.jooq.codegen.JavaGenerator</name>

						<database>
							<!-- The database type. The format here is:
                                 org.jooq.meta.[database].[database]Database -->
							<name>org.jooq.meta.h2.H2Database</name>

							<!-- All elements that are generated from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions)
                                 Watch out for case-sensitivity. Depending on your database, this might be important! -->
							<includes>.*</includes>


							<!-- All elements that are excluded from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions).
                                 Excludes match before includes, i.e. excludes have a higher priority -->
							<excludes></excludes>

						</database>

						<generate>
							<daos>true</daos>
							<springAnnotations>true</springAnnotations>
						</generate>

						<target>
							<!-- The destination package of your generated classes (within the destination directory) -->
							<packageName>com.marcobehler.springbootexercise.jooq</packageName>

							<!-- The destination directory of your generated classes. Using Maven directory layout here -->
							<directory>target/generated-sources</directory>
						</target>
					</generator>
				</configuration>
				<executions>
					<execution>
						<id>jooq-codegen</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
